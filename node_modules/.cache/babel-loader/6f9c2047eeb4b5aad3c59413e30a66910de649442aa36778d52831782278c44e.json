{"ast":null,"code":"var _jsxFileName = \"/Users/yashrajsingh/Desktop/google map/src/components/GooglePlacesApi.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { REACT_APP_GOOGLE_MAPS_KEY } from \"../constants/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet autoComplete;\nconst loadScript = (url, callback) => {\n  let script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  if (script.readyState) {\n    script.onreadystatechange = function () {\n      if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n        script.onreadystatechange = null;\n        callback();\n      }\n    };\n  } else {\n    script.onload = () => callback();\n  }\n  script.src = url;\n  document.getElementsByTagName(\"head\")[0].appendChild(script);\n};\nconst SearchLocationInput = _ref => {\n  _s();\n  let {\n    setSelectedLocation,\n    setSelectedAddress\n  } = _ref;\n  const [query, setQuery] = useState(\"\");\n  const autoCompleteRef = useRef(null);\n  const handleScriptLoad = (updateQuery, autoCompleteRef) => {\n    autoComplete = new window.google.maps.places.Autocomplete(autoCompleteRef.current, {\n      componentRestrictions: {\n        country: \"GB\"\n      }\n    });\n    autoComplete.addListener(\"place_changed\", () => {\n      handlePlaceSelect(updateQuery);\n    });\n  };\n  const handlePlaceSelect = async updateQuery => {\n    var _addressObject$geomet, _addressObject$geomet2, _addressObject$geomet3, _addressObject$geomet4;\n    const addressObject = await autoComplete.getPlace();\n    const query = addressObject.formatted_address;\n\n    // Set the address to state\n    updateQuery(query);\n    setSelectedAddress(query); // Save the selected address\n    console.log({\n      query\n    });\n    const latLng = {\n      lat: addressObject === null || addressObject === void 0 ? void 0 : (_addressObject$geomet = addressObject.geometry) === null || _addressObject$geomet === void 0 ? void 0 : (_addressObject$geomet2 = _addressObject$geomet.location) === null || _addressObject$geomet2 === void 0 ? void 0 : _addressObject$geomet2.lat(),\n      lng: addressObject === null || addressObject === void 0 ? void 0 : (_addressObject$geomet3 = addressObject.geometry) === null || _addressObject$geomet3 === void 0 ? void 0 : (_addressObject$geomet4 = _addressObject$geomet3.location) === null || _addressObject$geomet4 === void 0 ? void 0 : _addressObject$geomet4.lng()\n    };\n    console.log({\n      latLng\n    });\n    setSelectedLocation(latLng);\n  };\n  useEffect(() => {\n    loadScript(`https://maps.googleapis.com/maps/api/js?key=${REACT_APP_GOOGLE_MAPS_KEY}&libraries=places`, () => handleScriptLoad(setQuery, autoCompleteRef));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-location-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Type in your suburb or postcode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: autoCompleteRef,\n      className: \"form-control\",\n      onChange: event => setQuery(event.target.value),\n      placeholder: \"Search Places ...\",\n      value: query\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchLocationInput, \"cw7s3e3vkyUWL/AnWpSxZTGSPcQ=\");\n_c = SearchLocationInput;\nexport default SearchLocationInput;\nvar _c;\n$RefreshReg$(_c, \"SearchLocationInput\");","map":{"version":3,"names":["React","useEffect","useRef","useState","REACT_APP_GOOGLE_MAPS_KEY","autoComplete","loadScript","url","callback","script","document","createElement","type","readyState","onreadystatechange","onload","src","getElementsByTagName","appendChild","SearchLocationInput","setSelectedLocation","setSelectedAddress","query","setQuery","autoCompleteRef","handleScriptLoad","updateQuery","window","google","maps","places","Autocomplete","current","componentRestrictions","country","addListener","handlePlaceSelect","addressObject","getPlace","formatted_address","console","log","latLng","lat","geometry","location","lng","event","target","value"],"sources":["/Users/yashrajsingh/Desktop/google map/src/components/GooglePlacesApi.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { REACT_APP_GOOGLE_MAPS_KEY } from \"../constants/constants\";\n\nlet autoComplete;\n\nconst loadScript = (url, callback) => {\n  let script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n\n  if (script.readyState) {\n    script.onreadystatechange = function () {\n      if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n        script.onreadystatechange = null;\n        callback();\n      }\n    };\n  } else {\n    script.onload = () => callback();\n  }\n\n  script.src = url;\n  document.getElementsByTagName(\"head\")[0].appendChild(script);\n};\n\nconst SearchLocationInput = ({ setSelectedLocation, setSelectedAddress }) => {\n  const [query, setQuery] = useState(\"\");\n  const autoCompleteRef = useRef(null);\n\n  const handleScriptLoad = (updateQuery, autoCompleteRef) => {\n    autoComplete = new window.google.maps.places.Autocomplete(\n      autoCompleteRef.current,\n      {\n        componentRestrictions: { country: \"GB\" },\n      }\n    );\n\n    autoComplete.addListener(\"place_changed\", () => {\n      handlePlaceSelect(updateQuery);\n    });\n  };\n\n  const handlePlaceSelect = async (updateQuery) => {\n    const addressObject = await autoComplete.getPlace();\n    const query = addressObject.formatted_address;\n    \n    // Set the address to state\n    updateQuery(query);\n    setSelectedAddress(query); // Save the selected address\n    console.log({ query });\n\n    const latLng = {\n      lat: addressObject?.geometry?.location?.lat(),\n      lng: addressObject?.geometry?.location?.lng(),\n    };\n\n    console.log({ latLng });\n    setSelectedLocation(latLng);\n  };\n\n  useEffect(() => {\n    loadScript(\n      `https://maps.googleapis.com/maps/api/js?key=${REACT_APP_GOOGLE_MAPS_KEY}&libraries=places`,\n      () => handleScriptLoad(setQuery, autoCompleteRef)\n    );\n  }, []);\n\n  return (\n    <div className=\"search-location-input\">\n      <label>Type in your suburb or postcode</label>\n      <input\n        ref={autoCompleteRef}\n        className=\"form-control\"\n        onChange={(event) => setQuery(event.target.value)}\n        placeholder=\"Search Places ...\"\n        value={query}\n      />\n    </div>\n  );\n};\n\nexport default SearchLocationInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}